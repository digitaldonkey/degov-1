<?php

/**
 * @file
 * Install, update and uninstall hooks for the degov_media_address module.
 */

use Drupal\Core\Utility\UpdateException;
use Drupal\degov_common\Common;
use Drupal\field\Entity\FieldStorageConfig;
use Symfony\Component\Yaml\Yaml;

/**
 * Implements hook_uninstall().
 */
function degov_media_address_uninstall() {
  // Removes all module type defined content when uninstalling the module.
  Common::removeContent([
    'entity_type' => 'media',
    'entity_bundles' => ['address'],
  ]);
}

/**
 * Implements hook_update_last_removed().
 */
function degov_media_address_update_last_removed() {
  return 8011;
}

/**
 * Add field for link.
 */
function degov_media_address_update_870600() {
  /**
   * @var \Drupal\Core\Config\ConfigFactory $configFactory
   */
  $configFactory = \Drupal::service('config.factory');
  /**
   * @var Drupal\Core\Config\Config $config
   */
  $config = $configFactory->getEditable('core.entity_form_display.media.address.default');
  $moduleConfig = $config->get('dependencies.module');
  $moduleConfig[] = 'link';
  $config->set('dependencies.module', $moduleConfig);

  $dependenciesConfig = $config->get('dependencies.config');
  $dependenciesConfig[] = 'field.field.media.address.field_address_link';
  $config->set('dependencies.config', $dependenciesConfig);

  $config->set('third_party_settings.field_group.group_contact_details.children', array_merge(
    $config->get('third_party_settings.field_group.group_contact_details.children'),
    ['field_address_link'])
  );

  $config->set('content', array_merge(
    $config->get('content'),
    [
      'field_address_link' => [
        'weight'               => 24,
        'settings'             => [
          'placeholder_url'   => '',
          'placeholder_title' => '',
        ],
        'third_party_settings' => [],
        'type'                 => 'link_default',
        'region'               => 'content',
      ],
    ]
  ));
  $config->save(TRUE);

  $fieldAddressLinkStorageConfig = Yaml::parseFile(drupal_get_path('module', 'degov_media_address') . '/config/install/field.storage.media.field_address_link.yml');

  FieldStorageConfig::create($fieldAddressLinkStorageConfig)->save();

  $fieldAddressLinkConfig = Yaml::parseFile(drupal_get_path('module', 'degov_media_address') . '/config/install/field.field.media.address.field_address_link.yml');
  $config = $configFactory->getEditable('field.field.media.address.field_address_link');
  if (!$config->isNew()) {
    throw new UpdateException('Storage contains unexpected config.');
  }
  $config->setData($fieldAddressLinkConfig);
  $config->save(TRUE);

  $config = $configFactory->getEditable('core.entity_view_display.media.address.default');
  $dependenciesConfig = $config->get('dependencies.config');
  $dependenciesConfig[] = 'field.field.media.address.field_address_link';
  $config->set('dependencies.config', $dependenciesConfig);

  $dependenciesModule = $config->get('dependencies.module');
  $dependenciesModule[] = 'link';
  $config->set('dependencies.module', $dependenciesModule);

  $config->set('content', array_merge($config->get('content'), [
    'field_address_link' => [
      'weight'   => 6,
      'label'    => 'hidden',
      'settings' => [
        'trim_length' => 80,
        'url_only'    => FALSE,
        'url_plain'   => FALSE,
        'rel'         => '',
        'target'      => '',
      ],
    ],
  ]));
  $config->save(TRUE);

}

/**
 * Switch cardinality of field_map_address_reference to unlimited.
 */
function degov_media_address_update_880300() {
  $paragraphMapConfig = \Drupal::configFactory()->getEditable('field.storage.paragraph.field_map_address_reference');

  if (!$paragraphMapConfig->isNew()) {
    $paragraphMapConfig->set('cardinality', -1)->save();
  }
}

/**
 * deGov Update 8.5.0:
 * - Update path to map marker.
 * - Preparation for geocoder upgrade to 8.x-3.x.
 */
function degov_media_address_update_880500() {
  $configFactory = \Drupal::configFactory();

  $config = $configFactory
    ->getEditable('core.entity_view_display.media.address.default_map');

  if (!$config->isNew()) {
    $config->set('content.field_address_location.settings.style.pin', 'profiles/degov/modules/degov_media_address/images/map-icon.png')
      ->save(TRUE);
  }

  // geocoder_post_update_convert_simple_config_to_entities do not add
  // all default configuration for this plugin on this update.
  $config_file = Yaml::parseFile(drupal_get_path('module', 'degov_media_address') . '/config/install/geocoder.geocoder_provider.openstreetmap.yml');
  $config = $configFactory->getEditable('geocoder.geocoder_provider.openstreetmap');
  $config->setData($config_file);
  $config->save();

  // Remove the plugins_options openstreetmap, so that geocoder_post_update_convert_simple_config_to_entities
  // do not add the new geocoder provider, which is already added via above config.
  $config = $configFactory->getEditable('geocoder.settings');
  $plugins_options = $config->get('plugins_options');
  unset($plugins_options['openstreetmap']);
  $config->set('plugins_options', $plugins_options);
  $config->save();

  // geocoder_field_post_update_rename_providers_in_third_party_settings
  // do also just the half of the work.
  $config = $configFactory->getEditable('field.field.media.address.field_address_location');
  $geocoder_field = $config->get('third_party_settings.geocoder_field');
  if ($geocoder_field['method'] !== 'geocode') {
    $geocoder_field['method'] = 'geocode';
    $config->set('third_party_settings.geocoder_field', $geocoder_field);
    $config->save();
  }

}
