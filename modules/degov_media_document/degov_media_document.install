<?php

use Drupal\Core\Url;
use Drupal\degov_common\Common;
use Drupal\degov_common\DegovModuleUpdater;
use Symfony\Component\Yaml\Yaml;

/**
 * Implements hook_install().
 */
function degov_media_document_install(): void {
  // Adds the document tab upon installation to the CKEditor media browser.
  $ckeditorMediaBrowserConfig = \Drupal::configFactory()->getEditable('entity_browser.browser.ckeditor_media_browser');
  if (!$ckeditorMediaBrowserConfig->isNew()) {
    $filtersConfig = $ckeditorMediaBrowserConfig->get('widgets');
    $partialFile = \Drupal::service('extension.list.module')->getPath('degov_media_document') . '/config/partials/entity_browser.browser.ckeditor_media_browser.yml';
    if (file_exists($partialFile)) {
      $filtersConfig += Yaml::parseFile($partialFile);
      $ckeditorMediaBrowserConfig->set('widgets', $filtersConfig);
      $ckeditorMediaBrowserConfig->save();
    }
  }
}

/**
 * Implements hook_uninstall().
 */
function degov_media_document_upload_uninstall(): void {
  // Remove the document bundle dependency on the entity media browser.
  $dependencies = \Drupal::config('entity_browser.browser.media_browser')
    ->get('dependencies.config');
  foreach ($dependencies as $key => $dependency) {
    if ($dependency == 'media.type.document') {
      unset($dependencies[$key]);
    }
  }
  $dependencies = array_values($dependencies);
  \Drupal::configFactory()->getEditable('entity_browser.browser.media_browser')
    ->set('dependencies.config', $dependencies)
    ->save(TRUE);

  // Remove the document tab from the entity media browser.
  $key = "88a662a5-10c0-4229-b807-07b76e36b771";
  $widgets = \Drupal::config("entity_browser.browser.media_browser")
    ->get("widgets");
  if (!empty($widgets[$key])) {
    unset($widgets[$key]);
    \Drupal::configFactory()->getEditable("entity_browser.browser.media_browser")
      ->set("widgets", $widgets)
      ->save(TRUE);
  }
  // Remove content
  Common::removeContent([
    'entity_type' => 'media',
    'entity_bundles' => ['document'],
  ]);
}

/**
 * Implements hook_requirements().
 */
function degov_media_document_requirements(string $phase): array {
  $requirements = [];

  if (!\Drupal::service('module_handler')->moduleExists('permissions_by_entity')) {
    $requirements['degov_media_document'] = [
      'title' => t('deGov media document'),
      'description' => t(
        'By <a href=":extend">enabling</a> the Permissions by Entity module, permission checks during document download will become available.<br />For more information on Permissions by Entity and Permissions by Term, take a look at the project page on <a href=":project_page" target="_blank">drupal.org</a>!',
        [
          ':extend' => Url::fromRoute('system.modules_list')->toString(),
          ':project_page' => 'https://www.drupal.org/project/permissions_by_term',
        ]
      ),
      'value' => t('Additional functionality available'),
      'severity' => REQUIREMENT_WARNING,
    ];
  }

  return $requirements;
}

/**
 * deGov Udpate 5.1.0 - Configuration updates for restricted files.
 */
function degov_media_document_update_850100(): void {
  /**
   * @var DegovModuleUpdater $updater
   */
  $updater = \Drupal::service('degov_config.module_updater');
  $updater->reImport('field.field.media.document.field_section', 'degov_media_document', 'install');
  $updater->reImport('field.storage.media.field_section', 'degov_media_document', 'install');
  $updater->rewriteModuleConfig('degov_media_document');
}

/**
 * deGov Update 6.0.0
 * Make document field required
 */
function degov_media_document_update_860000(): void {
  $fieldDocumentConfig = \Drupal::configFactory()
    ->getEditable('field.field.media.document.field_document');
  if (!empty($fieldDocumentConfig)) {
    $fieldDocumentConfig->set('required', TRUE);
    $fieldDocumentConfig->save();
  }
}

/**
 * deGov Update 7.6.0 - Add new view mode content_search, add description and preview image fields, add the fields to the default display.
 */
function degov_media_document_update_876000(): void {
  // Add new display mode and fields.
  \Drupal::service('degov_config.module_updater')
    ->applyUpdates('degov_media_document', '876000');

  // Add fields to form display.
  $formDisplayConfig = \Drupal::configFactory()->getEditable('core.entity_form_display.media.document.default');
  $parsedData = Yaml::parseFile(\Drupal::service('extension.list.module')->getPath('degov_media_document') . '/config/rewrite/core.entity_form_display.media.document.default.yml');
  if(!empty($parsedData)) {
    $formDisplayConfig->setData($parsedData)->save();
  }

  // Add fields to default display.
  $defaultDisplayConfig = \Drupal::configFactory()->getEditable('core.entity_view_display.media.document.default');
  $dependenciesConfig = $defaultDisplayConfig->get('dependencies.config');
  $dependenciesConfig = array_merge($dependenciesConfig, ['field.field.media.document.field_description', 'field.field.media.document.field_document_preview', 'image.style.thumbnail']);
  $defaultDisplayConfig->set('dependencies.config', $dependenciesConfig);
  $hiddenConfig = $defaultDisplayConfig->get('hidden');
  $hiddenConfig = array_merge($hiddenConfig, ['field_description' => TRUE, 'field_document_preview' => TRUE]);
  $defaultDisplayConfig->set('hidden', $hiddenConfig);
  $defaultDisplayConfig->save();
}
