<?php

/**
 * @file
 * Install, update and uninstall hooks for the degov_node_press module.
 */

use Drupal\degov\TranslationImporter;
use Drupal\degov_common\Common;
use Symfony\Component\Yaml\Yaml;

/**
 * Implements hook_uninstall().
 */
function degov_node_press_uninstall() {
  /** @var \Drupal\degov_common\Entity\WorkflowHandler $workflowService */
  $workflowService = \Drupal::service('degov_common.workflow_handler');
  $workflowService->disableWorkflow('press');

  // Removes all module type defined content when uninstalling the module.
  Common::removeContent([
    'entity_type' => 'node',
    'entity_bundles' => ['press'],
  ]);
}

/**
 * Implements hook_install().
 */
function degov_node_press_install() {
  /** @var \Drupal\degov_common\Entity\WorkflowHandler $workflowService */
  $workflowService = \Drupal::service('degov_common.workflow_handler');
  $workflowService->enableWorkflow('press');
}

/**
 * Implements hook_update_dependencies().
 */
function degov_node_press_update_dependencies() {
  $dependencies['degov_node_press'][8013] = [
    'degov_common' => 8029,
  ];
  $dependencies['degov_node_press'][880500] = [
    'degov' => 880500,
  ];
  return $dependencies;
}

/**
 * Enable workflow for content type
 * */
function degov_node_press_update_8012() {
  \Drupal::service('module_installer')->install(['degov_users_roles']);
  /** @var \Drupal\degov_common\Entity\WorkflowHandler $workflowService */
  $workflowService = \Drupal::service('degov_common.workflow_handler');
  $workflowService->enableWorkflow('press');
}

/**
 * Adds missing view modes
 */
function degov_node_press_update_8013() {
  \Drupal::service('degov_config.module_updater')
    ->applyUpdates('degov_node_press', '8013');
}

/**
 * Updated date format in node view mode's display to DD.MM.YYYY
 */
function degov_node_press_update_8014() {
  /** @var \Drupal\Core\Config\ConfigFactory $configFactory */
  $configFactory = \Drupal::service('config.factory');

  $configNamespaces = [
    'core.entity_view_display.node.press.default',
    'core.entity_view_display.node.press.email_html',
    'core.entity_view_display.node.press.email_plain',
    'core.entity_view_display.node.press.latest',
    'core.entity_view_display.node.press.long_text',
    'core.entity_view_display.node.press.preview',
    'core.entity_view_display.node.press.slideshow',
    'core.entity_view_display.node.press.slim',
    'core.entity_view_display.node.press.small_image',
  ];

  foreach ($configNamespaces as $namespace) {
    $configFromYaml = Yaml::parse(
    file_get_contents(drupal_get_path('module', 'degov_node_press') . '/config/install/' . $namespace . '.yml')
    );

    $configFromStorage = $configFactory->getEditable($namespace);
    $configFromStorage->set('content.field_press_date', $configFromYaml['content']['field_press_date']);
    $configFromStorage->save();
  }

}

/**
 * Update paragraph experimental
 */
function degov_node_press_update_8015() {
  \Drupal::service('degov_config.module_updater')
    ->applyUpdates('degov_node_press', '8015');
}

/**
 * deGov Update 5.1.0 - Apply config to use the landscape_to_squared image style.
 */
function degov_node_press_update_850100() {
  \Drupal::service('degov_config.module_updater')
    ->applyUpdates('degov_node_press', '8015');
}

/**
 * deGov Update 7.0.0 - Update the latest press release view block description.
 */
function degov_node_press_update_870000() {
  $configFactory = \Drupal::service('config.factory');
  $config = $configFactory->getEditable('views.view.press_latest_content');
  $config->set('display.press_slider.display_options.block_description', 'Neuste Pressemitteilung (Slider)');
  $config->save(TRUE);
}

/**
 * Update existing entity form translations.
 */
function degov_node_press_update_880000() {
  TranslationImporter::importConfigTranslationOfModule('core.entity_form_display.node.press.default', 'degov_node_press');
}

/**
 * Replace views deprecated footer with paragraph links if default content.
 */
function degov_node_press_update_880500() {
  if (\Drupal::moduleHandler()->moduleExists('degov_paragraph_view_reference')) {
    define('DEGOV_NODE_PRESS_OLD_VIEWS_FOOTER_CONTENT', "<p> <a href=\"/de/pressetermine\"><i class=\"fa fa-arrow-right\" aria-hidden=\"true\"></i>PRESSETERMINE</a>\n<a href=\"/de/aktuelles-und-presse/pressekontakt\"><i class=\"fa fa-arrow-right\" aria-hidden=\"true\"></i>PRESSEKONTAKT</a></p>");
    $config_factory = \Drupal::configFactory();
    $config = $config_factory->getEditable('views.view.press_latest_content');

    // Remove deprecated footer for all displays.
    $updatedDisplays = [];
    $allDisplays = $config->get('display');
    foreach ($allDisplays as $displayId => $display) {
      if (isset($display['display_options']['footer']['area_text_custom']['content'])) {
        // We had a master display with custom text
        // and another display overriding that with a empty string.
        // Intentionally ignoring non empty, non default footer contents.
        if ($display['display_options']['footer']['area_text_custom']['content'] === DEGOV_NODE_PRESS_OLD_VIEWS_FOOTER_CONTENT) {
          // Remove text from views footer.
          unset($allDisplays[$displayId]['display_options']['footer']['area_text_custom']);
        }
        elseif (trim($display['display_options']['footer']['area_text_custom']['content']) === '') {
          // Remove inherited text area leftovers.
          unset($allDisplays[$displayId]['display_options']['footer']['area_text_custom']);
        }
      }
      else {
        // Add not overridden displays to update as they had links from master.
        $updatedDisplays[] = $displayId;
      }
    }
    $config->set('display', $allDisplays);
    $config->save();

    // Add default links from code if there was a default footer before.
    if (count($updatedDisplays)) {
      $paragraphs = \Drupal::entityTypeManager()->getStorage('paragraph');
      $query = \Drupal::entityQuery('paragraph');

      // Get all paragraphs referencing the view.
      if (count($updatedDisplays) == 1) {
        $query
          ->condition('field_view_reference_view.target_id', 'press_latest_content', '=')
          ->condition('field_view_reference_view.display_id', $updatedDisplays[0]);
      }
      else {
        $group = $query->orConditionGroup();
        foreach ($updatedDisplays as $dId) {
          $group->condition('field_view_reference_view.display_id', $dId);
        }
        $query
          ->condition('field_view_reference_view.target_id', 'press_latest_content', '=')
          ->condition($group);
      }
      $referencing_paragraphs = array_values($query->execute());

      // Default links.
      $links = [
        0 => [
          'uri' => 'internal:/de/aktuelles-und-presse/pressekontakt',
          'title' => 'Pressekontakt',
        ],
        1 => [
          'uri' => 'internal:/de/pressetermine',
          'title' => 'Pressetermine',
        ],
      ];
      foreach ($paragraphs->loadMultiple($referencing_paragraphs) as $paragraph) {
        /* @var $linkList \Drupal\Core\Field\FieldItemList*/
        $linkList = $paragraph->get('field_view_reference_links');
        $paragraphId = $paragraph->id();
        $values = $linkList->isEmpty() ? [] : $linkList->getValue();

        // Add link if it is not there yet.
        foreach ($links as $l) {
          $linkExists = FALSE;
          foreach ($values as $old_l) {
            if ($l['uri'] === $old_l['uri']) {
              $linkExists = TRUE;
            }
          }
          if (!$linkExists) {
            $values[] = $l;
          }
        }
        $paragraph->set('field_view_reference_links', $values);
        $paragraph->setNewRevision();
        $paragraph->save();
        $paragraphRevId = $paragraph->getRevisionId();

        /* @var $node \Drupal\node\NodeInterface*/
        $node = $paragraph->getParentEntity();
        $content_paragraphs = $node->get('field_content_paragraphs')->getValue();
        foreach ($content_paragraphs as $delta => $entity_ref) {
          if ($paragraphId === $entity_ref['target_id']) {
            $content_paragraphs[$delta]['target_revision_id'] = $paragraphRevId;
          }
        }
        $node->set('field_content_paragraphs', $content_paragraphs);
        $node->setNewRevision();
        $node->save();
      }
    }
  }
}
